// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tsuyogoro/sugorokuon/Song.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.tsuyogoro.sugorokuon;

@kotlin.jvm.JvmName("-initializesongThumbnail")
public inline fun songThumbnail(block: com.tsuyogoro.sugorokuon.SongThumbnailKt.Dsl.() -> kotlin.Unit): com.tsuyogoro.sugorokuon.SongThumbnail =
  com.tsuyogoro.sugorokuon.SongThumbnailKt.Dsl._create(com.tsuyogoro.sugorokuon.SongThumbnail.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `tsuyogoro.sugorokuon.SongThumbnail`
 */
public object SongThumbnailKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.tsuyogoro.sugorokuon.SongThumbnail.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: com.tsuyogoro.sugorokuon.SongThumbnail.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): com.tsuyogoro.sugorokuon.SongThumbnail = _builder.build()

    /**
     * `string small = 1 [json_name = "small"];`
     */
    public var small: kotlin.String
      @JvmName("getSmall")
      get() = _builder.small
      @JvmName("setSmall")
      set(value) {
        _builder.small = value
      }
    /**
     * `string small = 1 [json_name = "small"];`
     */
    public fun clearSmall() {
      _builder.clearSmall()
    }

    /**
     * `string medium = 2 [json_name = "medium"];`
     */
    public var medium: kotlin.String
      @JvmName("getMedium")
      get() = _builder.medium
      @JvmName("setMedium")
      set(value) {
        _builder.medium = value
      }
    /**
     * `string medium = 2 [json_name = "medium"];`
     */
    public fun clearMedium() {
      _builder.clearMedium()
    }

    /**
     * `string large = 3 [json_name = "large"];`
     */
    public var large: kotlin.String
      @JvmName("getLarge")
      get() = _builder.large
      @JvmName("setLarge")
      set(value) {
        _builder.large = value
      }
    /**
     * `string large = 3 [json_name = "large"];`
     */
    public fun clearLarge() {
      _builder.clearLarge()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.tsuyogoro.sugorokuon.SongThumbnail.copy(block: `com.tsuyogoro.sugorokuon`.SongThumbnailKt.Dsl.() -> kotlin.Unit): com.tsuyogoro.sugorokuon.SongThumbnail =
  `com.tsuyogoro.sugorokuon`.SongThumbnailKt.Dsl._create(this.toBuilder()).apply { block() }._build()

