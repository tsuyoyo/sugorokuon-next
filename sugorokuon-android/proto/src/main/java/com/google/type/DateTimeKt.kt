// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: google/type/datetime.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.google.type;

@kotlin.jvm.JvmName("-initializedateTime")
public inline fun dateTime(block: com.google.type.DateTimeKt.Dsl.() -> kotlin.Unit): com.google.type.DateTime =
  com.google.type.DateTimeKt.Dsl._create(com.google.type.DateTime.newBuilder()).apply { block() }._build()
/**
 * ```
 * Represents civil time (or occasionally physical time).
 *
 * This type can represent a civil time in one of a few possible ways:
 *
 * * When utc_offset is set and time_zone is unset: a civil time on a calendar
 * day with a particular offset from UTC.
 * * When time_zone is set and utc_offset is unset: a civil time on a calendar
 * day in a particular time zone.
 * * When neither time_zone nor utc_offset is set: a civil time on a calendar
 * day in local time.
 *
 * The date is relative to the Proleptic Gregorian Calendar.
 *
 * If year is 0, the DateTime is considered not to have a specific year. month
 * and day must have valid, non-zero values.
 *
 * This type may also be used to represent a physical time if all the date and
 * time fields are set and either case of the `time_offset` oneof is set.
 * Consider using `Timestamp` message for physical time instead. If your use
 * case also would like to store the user's timezone, that can be done in
 * another field.
 *
 * This type is more flexible than some applications may want. Make sure to
 * document and validate your application's limitations.
 * ```
 *
 * Protobuf type `google.type.DateTime`
 */
public object DateTimeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.google.type.DateTime.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: com.google.type.DateTime.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): com.google.type.DateTime = _builder.build()

    /**
     * ```
     * Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a
     * datetime without a year.
     * ```
     *
     * `int32 year = 1 [json_name = "year"];`
     */
    public var year: kotlin.Int
      @JvmName("getYear")
      get() = _builder.year
      @JvmName("setYear")
      set(value) {
        _builder.year = value
      }
    /**
     * ```
     * Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a
     * datetime without a year.
     * ```
     *
     * `int32 year = 1 [json_name = "year"];`
     */
    public fun clearYear() {
      _builder.clearYear()
    }

    /**
     * ```
     * Required. Month of year. Must be from 1 to 12.
     * ```
     *
     * `int32 month = 2 [json_name = "month"];`
     */
    public var month: kotlin.Int
      @JvmName("getMonth")
      get() = _builder.month
      @JvmName("setMonth")
      set(value) {
        _builder.month = value
      }
    /**
     * ```
     * Required. Month of year. Must be from 1 to 12.
     * ```
     *
     * `int32 month = 2 [json_name = "month"];`
     */
    public fun clearMonth() {
      _builder.clearMonth()
    }

    /**
     * ```
     * Required. Day of month. Must be from 1 to 31 and valid for the year and
     * month.
     * ```
     *
     * `int32 day = 3 [json_name = "day"];`
     */
    public var day: kotlin.Int
      @JvmName("getDay")
      get() = _builder.day
      @JvmName("setDay")
      set(value) {
        _builder.day = value
      }
    /**
     * ```
     * Required. Day of month. Must be from 1 to 31 and valid for the year and
     * month.
     * ```
     *
     * `int32 day = 3 [json_name = "day"];`
     */
    public fun clearDay() {
      _builder.clearDay()
    }

    /**
     * ```
     * Required. Hours of day in 24 hour format. Should be from 0 to 23. An API
     * may choose to allow the value "24:00:00" for scenarios like business
     * closing time.
     * ```
     *
     * `int32 hours = 4 [json_name = "hours"];`
     */
    public var hours: kotlin.Int
      @JvmName("getHours")
      get() = _builder.hours
      @JvmName("setHours")
      set(value) {
        _builder.hours = value
      }
    /**
     * ```
     * Required. Hours of day in 24 hour format. Should be from 0 to 23. An API
     * may choose to allow the value "24:00:00" for scenarios like business
     * closing time.
     * ```
     *
     * `int32 hours = 4 [json_name = "hours"];`
     */
    public fun clearHours() {
      _builder.clearHours()
    }

    /**
     * ```
     * Required. Minutes of hour of day. Must be from 0 to 59.
     * ```
     *
     * `int32 minutes = 5 [json_name = "minutes"];`
     */
    public var minutes: kotlin.Int
      @JvmName("getMinutes")
      get() = _builder.minutes
      @JvmName("setMinutes")
      set(value) {
        _builder.minutes = value
      }
    /**
     * ```
     * Required. Minutes of hour of day. Must be from 0 to 59.
     * ```
     *
     * `int32 minutes = 5 [json_name = "minutes"];`
     */
    public fun clearMinutes() {
      _builder.clearMinutes()
    }

    /**
     * ```
     * Required. Seconds of minutes of the time. Must normally be from 0 to 59. An
     * API may allow the value 60 if it allows leap-seconds.
     * ```
     *
     * `int32 seconds = 6 [json_name = "seconds"];`
     */
    public var seconds: kotlin.Int
      @JvmName("getSeconds")
      get() = _builder.seconds
      @JvmName("setSeconds")
      set(value) {
        _builder.seconds = value
      }
    /**
     * ```
     * Required. Seconds of minutes of the time. Must normally be from 0 to 59. An
     * API may allow the value 60 if it allows leap-seconds.
     * ```
     *
     * `int32 seconds = 6 [json_name = "seconds"];`
     */
    public fun clearSeconds() {
      _builder.clearSeconds()
    }

    /**
     * ```
     * Required. Fractions of seconds in nanoseconds. Must be from 0 to
     * 999,999,999.
     * ```
     *
     * `int32 nanos = 7 [json_name = "nanos"];`
     */
    public var nanos: kotlin.Int
      @JvmName("getNanos")
      get() = _builder.nanos
      @JvmName("setNanos")
      set(value) {
        _builder.nanos = value
      }
    /**
     * ```
     * Required. Fractions of seconds in nanoseconds. Must be from 0 to
     * 999,999,999.
     * ```
     *
     * `int32 nanos = 7 [json_name = "nanos"];`
     */
    public fun clearNanos() {
      _builder.clearNanos()
    }

    /**
     * ```
     * UTC offset. Must be whole seconds, between -18 hours and +18 hours.
     * For example, a UTC offset of -4:00 would be represented as
     * { seconds: -14400 }.
     * ```
     *
     * `.google.protobuf.Duration utc_offset = 8 [json_name = "utcOffset"];`
     */
    public var utcOffset: com.google.protobuf.Duration
      @JvmName("getUtcOffset")
      get() = _builder.utcOffset
      @JvmName("setUtcOffset")
      set(value) {
        _builder.utcOffset = value
      }
    /**
     * ```
     * UTC offset. Must be whole seconds, between -18 hours and +18 hours.
     * For example, a UTC offset of -4:00 would be represented as
     * { seconds: -14400 }.
     * ```
     *
     * `.google.protobuf.Duration utc_offset = 8 [json_name = "utcOffset"];`
     */
    public fun clearUtcOffset() {
      _builder.clearUtcOffset()
    }
    /**
     * ```
     * UTC offset. Must be whole seconds, between -18 hours and +18 hours.
     * For example, a UTC offset of -4:00 would be represented as
     * { seconds: -14400 }.
     * ```
     *
     * `.google.protobuf.Duration utc_offset = 8 [json_name = "utcOffset"];`
     * @return Whether the utcOffset field is set.
     */
    public fun hasUtcOffset(): kotlin.Boolean {
      return _builder.hasUtcOffset()
    }

    /**
     * ```
     * Time zone.
     * ```
     *
     * `.google.type.TimeZone time_zone = 9 [json_name = "timeZone"];`
     */
    public var timeZone: com.google.type.TimeZone
      @JvmName("getTimeZone")
      get() = _builder.timeZone
      @JvmName("setTimeZone")
      set(value) {
        _builder.timeZone = value
      }
    /**
     * ```
     * Time zone.
     * ```
     *
     * `.google.type.TimeZone time_zone = 9 [json_name = "timeZone"];`
     */
    public fun clearTimeZone() {
      _builder.clearTimeZone()
    }
    /**
     * ```
     * Time zone.
     * ```
     *
     * `.google.type.TimeZone time_zone = 9 [json_name = "timeZone"];`
     * @return Whether the timeZone field is set.
     */
    public fun hasTimeZone(): kotlin.Boolean {
      return _builder.hasTimeZone()
    }
    public val timeOffsetCase: com.google.type.DateTime.TimeOffsetCase
    @kotlin.jvm.JvmName("getTimeOffsetCase")
      get() = _builder.getTimeOffsetCase()

    public fun clearTimeOffset() {
      _builder.clearTimeOffset()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.google.type.DateTime.copy(block: `com.google.type`.DateTimeKt.Dsl.() -> kotlin.Unit): com.google.type.DateTime =
  `com.google.type`.DateTimeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.google.type.DateTimeOrBuilder.utcOffsetOrNull: com.google.protobuf.Duration?
  get() = if (hasUtcOffset()) getUtcOffset() else null

public val com.google.type.DateTimeOrBuilder.timeZoneOrNull: com.google.type.TimeZone?
  get() = if (hasTimeZone()) getTimeZone() else null

